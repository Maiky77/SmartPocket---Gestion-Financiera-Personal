"""
Django settings for smartpocket project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from decouple import config
from decouple import config, Csv
import pymysql

pymysql.install_as_MySQLdb()


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=False, cast=bool)

ALLOWED_HOSTS = config('ALLOWED_HOSTS', cast=Csv())



# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'authentication',
    'gastos',
    'presupuestos',
    'recomendaciones',
    'estadisticas',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'smartpocket.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'smartpocket.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

#DATABASES = {
#    'default': {
#        'ENGINE': 'django.db.backends.sqlite3',
#        'NAME': BASE_DIR / 'db.sqlite3',
#    }
#}

# En smartpocket/settings.py, en la sección DATABASES agregar:

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': config('MYSQL_DB'),
        'USER': config('MYSQL_USER'),
        'PASSWORD': config('MYSQL_PASSWORD'),
        'HOST': config('MYSQL_HOST'),
        'PORT': config('MYSQL_PORT'),
        'OPTIONS': {
            'charset': 'utf8mb4',
            'collation': 'utf8mb4_unicode_ci',
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
            # FORZAR COMPATIBILIDAD CON MARIADB 10.4
            'sql_mode': 'TRADITIONAL',
        },
        # DESACTIVAR VERIFICACIÓN DE VERSIÓN
        'TEST': {
            'ENGINE': 'django.db.backends.mysql',
        }
    }
}

# AGREGAR ESTA CONFIGURACIÓN AL FINAL DEL ARCHIVO:
import django.db.backends.mysql.base
django.db.backends.mysql.base.DatabaseWrapper.check_database_version_supported = lambda self: None

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Configuración del modelo de usuario personalizado
AUTH_USER_MODEL = 'authentication.Usuario'

# Configuración de login/logout URLs
LOGIN_URL = 'authentication:login'
LOGIN_REDIRECT_URL = 'authentication:dashboard'  # CAMBIO: Ahora redirige a dashboard (inicio)
LOGOUT_REDIRECT_URL = 'authentication:login'

#ALLOWED_HOSTS = ['127.0.0.1', 'localhost', 'smart-pocket.loc']

# Configuración de archivos media (fotos de perfil)
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Crear directorio media si no existe
import os
if not os.path.exists(MEDIA_ROOT):
    os.makedirs(MEDIA_ROOT)
    os.makedirs(MEDIA_ROOT / 'perfiles')

# Para desarrollo - servir archivos media
#if DEBUG:
    # Esto se agregará en urls.py principal

# ==================== CONFIGURACIÓN DE EMAIL ====================
# ==================== CONFIGURACIÓN DE EMAIL ====================
# Configuración para desarrollo Y producción
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = config('EMAIL_HOST_USER', default='')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD', default='')
DEFAULT_FROM_EMAIL = f'SmartPocket <{config("EMAIL_HOST_USER", default="noreply@smartpocket.com")}>'

# Configuración adicional para emails
EMAIL_TIMEOUT = 30
EMAIL_USE_SSL = False  # Usar TLS, no SSL

# Fallback para desarrollo
if DEBUG and not config('EMAIL_HOST_USER', default=''):
    # Si no hay configuración de Gmail, usar consola
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
    DEFAULT_FROM_EMAIL = 'SmartPocket <noreply@smartpocket.com>'
    print("⚠️ MODO DESARROLLO: Emails se mostrarán en consola")


STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

# Para archivos de media (subidas de usuarios)
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')





# FORZAR COMPATIBILIDAD CON MARIADB 10.4
import django.db.backends.mysql.base
django.db.backends.mysql.base.DatabaseWrapper.check_database_version_supported = lambda self: None

# DESACTIVAR RETURNING CLAUSE PARA MARIADB 10.4
from django.db.backends.mysql.features import DatabaseFeatures
DatabaseFeatures.can_return_columns_from_insert = False
DatabaseFeatures.can_return_rows_from_bulk_insert = False

# CONFIGURAR OPTIONS ADICIONALES
DATABASES['default']['OPTIONS'].update({
    'autocommit': True,
    'use_unicode': True,
    'charset': 'utf8mb4',
    'collation': 'utf8mb4_unicode_ci',
    'init_command': "SET sql_mode='STRICT_TRANS_TABLES', innodb_strict_mode=1",
})


# ==================== CONFIGURACIONES ADICIONALES PARA EMAILS OPTIMIZADOS ====================
# AGREGAR AL FINAL DE smartpocket/settings.py

# Configuraciones adicionales para evitar SPAM
EMAIL_USE_LOCALTIME = True
EMAIL_TIMEOUT = 60  # Aumentar timeout

# Headers adicionales para mejorar deliverability
DEFAULT_FROM_EMAIL = f'SmartPocket<{config("EMAIL_HOST_USER", default="noreply@smartpocket.com")}>'
SERVER_EMAIL = DEFAULT_FROM_EMAIL

# Configuración para modo debug
if DEBUG:
    # En desarrollo, mostrar emails en consola como backup
    # EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
    
    # Para usar Gmail en desarrollo, mantener SMTP
    print("📧 Configuración de email para DESARROLLO:")
    print(f"   Backend: {EMAIL_BACKEND}")
    print(f"   Host: {EMAIL_HOST}")
    print(f"   From: {DEFAULT_FROM_EMAIL}")
    print(f"   Usuario: {config('EMAIL_HOST_USER', default='No configurado')}")

# Configuración de logging para emails (opcional)
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'email_file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'emails.log'),
        },
    },
    'loggers': {
        'authentication.views': {
            'handlers': ['email_file'],
            'level': 'INFO',
            'propagate': True,
        },
    },
}

# Crear directorio de logs si no existe
logs_dir = os.path.join(BASE_DIR, 'logs')
if not os.path.exists(logs_dir):
    os.makedirs(logs_dir)


# ==================== CONFIGURACIÓN PARA RAILWAY ====================
import os

# Archivos estáticos para producción
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Middleware para archivos estáticos (AGREGAR al inicio de MIDDLEWARE)
if 'whitenoise.middleware.WhiteNoiseMiddleware' not in MIDDLEWARE:
    MIDDLEWARE.insert(1, 'whitenoise.middleware.WhiteNoiseMiddleware')

# ==================== CONFIGURACIÓN PARA RAILWAY ====================
if 'RAILWAY_ENVIRONMENT' in os.environ or 'RAILWAY_STATIC_URL' in os.environ:
    print("🚂 DETECTADO ENTORNO RAILWAY - Configurando para producción...")
    
    # Base de datos Railway (MySQL automático)
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': os.environ.get('MYSQL_DATABASE', 'railway'),
            'USER': os.environ.get('MYSQL_USER', 'root'),
            'PASSWORD': os.environ.get('MYSQL_PASSWORD', ''),
            'HOST': os.environ.get('MYSQL_HOST', 'localhost'),
            'PORT': os.environ.get('MYSQL_PORT', '3306'),
            'OPTIONS': {
                'charset': 'utf8mb4',
                'collation': 'utf8mb4_unicode_ci',
                'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
            },
        }
    }
    
    # Configuraciones de seguridad para producción
    DEBUG = False
    ALLOWED_HOSTS = [
        '.railway.app', 
        '.up.railway.app',
        'smartpocket-production.up.railway.app'  # Tu dominio específico
    ]
    
    # CSRF y seguridad
    CSRF_TRUSTED_ORIGINS = [
        'https://*.railway.app',
        'https://*.up.railway.app'
    ]
    
    # Configuración de archivos estáticos para Railway
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
    
    print("✅ RAILWAY configurado correctamente")

else:
    print("💻 ENTORNO LOCAL - Usando configuración de desarrollo")